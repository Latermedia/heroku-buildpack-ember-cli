#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables

### Configure directories

BUILD_DIR=${1:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
BOWER_BIN="./node_modules/.bin/bower"
HAS_YARN_LOCK="false"
if [ -f "$BUILD_DIR/yarn.lock" ]; then
  HAS_YARN_LOCK="true"
fi

export_env_dir() {
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$ENV_DIR" ]; then
    for e in $(ls $ENV_DIR); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $ENV_DIR/$e)"
      :
    done
  fi
}

echo "-----> Exporting ENV variables"
export_env_dir

echo "-----> Copying scripts to application slug"
mkdir -p $BUILD_DIR/bin
cp $BP_DIR/scripts/rewrite-index-meta $BUILD_DIR/bin/rewrite-index-meta
cp $BP_DIR/scripts/set-cdn-prefix $BUILD_DIR/bin/set-cdn-prefix
cp -n $BP_DIR/scripts/Procfile $BUILD_DIR/Procfile

echo "-----> Copying static.json to application slug"
cp -n $BP_DIR/scripts/static.json $BUILD_DIR/static.json

cd $BUILD_DIR

if [ -d "./bower_components" ]; then
  echo "-----> Relying on cached bower_components"
else
  if [ -x $BOWER_BIN ]; then
    echo "-----> Using bower from package.json"
  else
    if [ "$HAS_YARN_LOCK" == "true" ]; then
      echo "-----> Installing Bower (via yarn)"
      yarn add bower
    else
      echo "-----> Installing Bower (via npm)"
      npm install bower
    fi
  fi

  echo "-----> Installing dependencies defined in bower.json"

  $BOWER_BIN install
  BOWER_EXIT_CODE=$?

  if [ $BOWER_EXIT_CODE -ne 0 ]
  then
    echo "-----> Bower installation failed, aborting Ember CLI Build"
    exit $BOWER_EXIT_CODE
  fi
fi

# Skip dependency checking because it'll fail when devDependencies are missing (e.g. testing dependencies)
echo "-----> Running Ember CLI Build"
SKIP_DEPENDENCY_CHECKER=true ./node_modules/.bin/ember build --environment=production

if [ "$HAS_YARN_LOCK" == "true" ]; then
  echo "-----> Installing dependencies for CDN prepend rewriting (via yarn)"
  yarn add replace
else
  echo "-----> Installing dependencies for CDN prepend rewriting (via npm)"
  npm install replace
fi
